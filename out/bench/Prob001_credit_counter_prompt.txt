Design a module called TopModule. This module is responsible for managing a credit-based system, where credits can be given or taken, and the credit status is monitored through several outputs. The module ensures that credits are neither underflowed nor overflowed and provides an interface for reinitialization.

1. Overview & Assumptions

TopModule manages a credit system with a defined maximum number of credits. It can increment or decrement the credit count based on input signals and provides outputs to indicate the number of credits left, whether the credits are full, and if they are about to be full. The module supports a soft reset feature to reinitialize the credit count.

2. Interface

Inputs
- clk_i: Clock input. The module is edge-sensitive to the positive edge of this clock. (1 bit)
- rst_ni: Asynchronous active-low reset input. Initializes the module state upon being asserted. (1 bit)
- credit_give_i: Signal to increment the credit count. Asserted high to give a credit. (1 bit)
- credit_take_i: Signal to decrement the credit count. Asserted high to take a credit. (1 bit)
- credit_init_i: Soft-reset signal to reinitialize the credit count to its initial state. Takes precedence over other operations when asserted. (1 bit)

Outputs
- credit_o: Current number of credits available, represented as a logic vector. Width is determined by the number of credits configured. (Width: log2(NumCredits) + 1 bits)
- credit_left_o: Indicates if any credits are available. Asserted high when credits are greater than zero. (1 bit)
- credit_crit_o: Indicates if the credit count is one less than the maximum, signaling that giving one more credit will fill it up. (1 bit)
- credit_full_o: Asserted high when the credits are at maximum capacity. (1 bit)

3. Protocols/Handshakes

TopModule does not employ complex handshaking protocols like AXI. Instead, it uses simple logic-based signaling. The credit_give_i and credit_take_i signals are mutually exclusive in functionality for a given clock cycle, ensuring that credits are either incremented or decremented, but not both simultaneously. The credit_init_i signal has priority over increment and decrement operations.

4. Behavioral Requirements

- Reset Behavior: On asserting rst_ni low, the module resets the credit count to zero if InitCreditEmpty is true or to the full credit count if false. The reset is asynchronous.
- Soft Reset: The credit_init_i signal reinitializes the credits and takes priority over other operations when asserted.
- Credit Management: 
  - Underflow Protection: The credit count will not decrease below zero. If credit_take_i is asserted when credits are zero, the decrement is ignored.
  - Overflow Protection: The credit count will not exceed the configured maximum. If credit_give_i is asserted when credits are at maximum, the increment is ignored.
- Backpressure: The module does not directly support backpressure but ensures that operations violating underflow or overflow conditions are ignored.
- Latency: Operations are processed with a one-clock-cycle latency from the assertion of the respective signals.

5. Configuration Parameters

- NumCredits: The maximum number of credits that the module can handle. Configurable at synthesis time. Must be a positive integer.
- InitCreditEmpty: Boolean parameter indicating whether the credit count is initialized to zero (true) or the maximum (false) upon reset.

6. Throughput/Latency Expectations

The module processes credit operations on every positive clock edge, assuming valid inputs. The throughput is effectively one credit operation per clock cycle, with a latency of one clock cycle for outputs to reflect changes.

7. Clocking/Reset Domains and Constraints

- Clock Domain: All operations are synchronized to the rising edge of clk_i.
- Reset Domain: The module supports an asynchronous active-low reset (rst_ni), which initializes or reinitializes the credit system.

8. Example Timing/Truth Tables

  clk_i   rst_ni   credit_give_i   credit_take_i   credit_init_i   credit_o   credit_left_o   credit_crit_o   credit_full_o  
 --------- ---------- ----------------- ----------------- ----------------- ------------ ----------------- ----------------- ----------------- 
  0         0          X                 X                 X                 Init         0                 0                 0                
  ↑         1          1                 0                 0                 +1           1                 0                 0                
  ↑         1          0                 1                 0                 -1           1                 0                 0                
  ↑         1          0                 0                 1                 Init         1/0               0/1               0/1              

In this table, Init refers to the initialized credit count based on the InitCreditEmpty parameter. The operations are subject to the constraints of preventing underflow and overflow.
